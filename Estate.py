import web3
import web3.eth
import web3.personal
import web3.miner
import web3.utils
import web3.manager
from web3 import Web3
import web3.contract

import time


class Estate:
    abi = "[{\"constant\":false,\"inputs\":[{\"name\":\"sale_number\",\"type\":\"uint256\"}],\"name\":\"cancel_to_buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sale_number\",\"type\":\"uint256\"}],\"name\":\"cancel_sale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"present_number\",\"type\":\"uint256\"}],\"name\":\"get_presents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledge_number\",\"type\":\"uint256\"}],\"name\":\"check_to_pledge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"present_number\",\"type\":\"uint256\"}],\"name\":\"present_time_out\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pledge_number\",\"type\":\"uint256\"}],\"name\":\"get_pledges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"present_number\",\"type\":\"uint256\"}],\"name\":\"confirm_present\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estate_id\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"create_sale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledge_number\",\"type\":\"uint256\"}],\"name\":\"confirm_pledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledge_number\",\"type\":\"uint256\"}],\"name\":\"cancel_pledge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"estate_number\",\"type\":\"uint256\"}],\"name\":\"get_estates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"present_number\",\"type\":\"uint256\"}],\"name\":\"cancel_present\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sale_number\",\"type\":\"uint256\"}],\"name\":\"check_to_buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sale_number\",\"type\":\"uint256\"}],\"name\":\"sale_time_out\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estate_id\",\"type\":\"uint256\"},{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"create_pledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"info\",\"type\":\"string\"},{\"name\":\"squere\",\"type\":\"uint256\"},{\"name\":\"useful_squere\",\"type\":\"uint256\"}],\"name\":\"create_estate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sale_number\",\"type\":\"uint256\"},{\"name\":\"sale_to\",\"type\":\"uint256\"}],\"name\":\"confirm_sale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledge_number\",\"type\":\"uint256\"}],\"name\":\"pledge_time_out\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledge_number\",\"type\":\"uint256\"}],\"name\":\"finish_pledge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"estate_number\",\"type\":\"uint256\"}],\"name\":\"get_estates_statuses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_pledges_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_presents_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_sales_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sale_number\",\"type\":\"uint256\"}],\"name\":\"get_sales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"prices\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estate_id\",\"type\":\"uint256\"},{\"name\":\"address_to\",\"type\":\"address\"},{\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"create_present\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_estates_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledge_number\",\"type\":\"uint256\"}],\"name\":\"refuse_pledge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledge_number\",\"type\":\"uint256\"}],\"name\":\"cancel_to_pledge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"
    bin = "608060405273ac771378bb6c2b8878fbf75f80880cbddefd1b1e600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156100a757600080fd5b50613a2f806100b76000396000f3fe60806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063043a97611461016f5780630e9bb1631461019d5780632b295deb146101d85780632b5cde3a1461029457806330eaa2ee146102c257806339fb3bb1146102fd5780633d53ce8a146103d25780633d68de2e146104005780634720501d1461044f57806354cba6841461048a57806357536e2f146104b85780635a4ab063146105b45780635ac1f0a8146105e2578063675c875c14610610578063759e94a61461064b578063761dce2c1461069a57806383695950146107965780638721efa3146107ce5780638dda6d3c146107fc5780639140ce041461082a578063a6794af214610893578063adede242146108be578063b75af61e146108e9578063e05c50a314610914578063e0f85f1614610a3b578063e9df2dd614610aa0578063ef8afbe014610acb578063fe7dd0ab14610af9575b600080fd5b61019b6004803603602081101561018557600080fd5b8101908080359060200190929190505050610b27565b005b3480156101a957600080fd5b506101d6600480360360208110156101c057600080fd5b8101908080359060200190929190505050610d08565b005b3480156101e457600080fd5b50610211600480360360208110156101fb57600080fd5b8101908080359060200190929190505050610f78565b604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390f35b6102c0600480360360208110156102aa57600080fd5b8101908080359060200190929190505050611051565b005b3480156102ce57600080fd5b506102fb600480360360208110156102e557600080fd5b810190808035906020019092919050505061115c565b005b34801561030957600080fd5b506103366004803603602081101561032057600080fd5b81019080803590602001909291905050506111f2565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018215151515815260200197505050505050505060405180910390f35b6103fe600480360360208110156103e857600080fd5b8101908080359060200190929190505050611350565b005b34801561040c57600080fd5b5061044d6004803603606081101561042357600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050611591565b005b34801561045b57600080fd5b506104886004803603602081101561047257600080fd5b8101908080359060200190929190505050611833565b005b6104b6600480360360208110156104a057600080fd5b810190808035906020019092919050505061199e565b005b3480156104c457600080fd5b506104f1600480360360208110156104db57600080fd5b8101908080359060200190929190505050611c54565b604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561057557808201518184015260208101905061055a565b50505050905090810190601f1680156105a25780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6105e0600480360360208110156105ca57600080fd5b8101908080359060200190929190505050611dcf565b005b61060e600480360360208110156105f857600080fd5b8101908080359060200190929190505050611f22565b005b34801561061c57600080fd5b506106496004803603602081101561063357600080fd5b8101908080359060200190929190505050612185565b005b34801561065757600080fd5b506106986004803603606081101561066e57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061221b565b005b3480156106a657600080fd5b50610794600480360360808110156106bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156106fa57600080fd5b82018360208201111561070c57600080fd5b8035906020019184600183028401116401000000008311171561072e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019092919050505061252a565b005b6107cc600480360360408110156107ac57600080fd5b8101908080359060200190929190803590602001909291905050506126fd565b005b6107fa600480360360208110156107e457600080fd5b8101908080359060200190929190505050612acc565b005b6108286004803603602081101561081257600080fd5b8101908080359060200190929190505050612d12565b005b34801561083657600080fd5b506108636004803603602081101561084d57600080fd5b8101908080359060200190929190505050612f8d565b60405180841515151581526020018315151515815260200182151515158152602001935050505060405180910390f35b34801561089f57600080fd5b506108a8613028565b6040518082815260200191505060405180910390f35b3480156108ca57600080fd5b506108d3613035565b6040518082815260200191505060405180910390f35b3480156108f557600080fd5b506108fe613042565b6040518082815260200191505060405180910390f35b34801561092057600080fd5b5061094d6004803603602081101561093757600080fd5b810190808035906020019092919050505061304f565b604051808881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156109de5780820151818401526020810190506109c3565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610a20578082015181840152602081019050610a05565b50505050905001995050505050505050505060405180910390f35b348015610a4757600080fd5b50610a9e60048036036060811015610a5e57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613252565b005b348015610aac57600080fd5b50610ab56134ec565b6040518082815260200191505060405180910390f35b610af760048036036020811015610ae157600080fd5b81019080803590602001909291905050506134f8565b005b610b2560048036036020811015610b0f57600080fd5b810190808035906020019092919050505061369d565b005b60008090505b600282815481101515610b3c57fe5b906000526020600020906007020160050180549050811015610d04573373ffffffffffffffffffffffffffffffffffffffff16600283815481101515610b7e57fe5b906000526020600020906007020160050182815481101515610b9c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610cf7573373ffffffffffffffffffffffffffffffffffffffff166108fc600284815481101515610c0c57fe5b906000526020600020906007020160060183815481101515610c2a57fe5b90600052602060002001549081150290604051600060405180830381858888f19350505050158015610c60573d6000803e3d6000fd5b50600282815481101515610c7057fe5b906000526020600020906007020160050181815481101515610c8e57fe5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282815481101515610cca57fe5b906000526020600020906007020160060181815481101515610ce857fe5b90600052602060002001600090555b8080600101915050610b2d565b5050565b600281815481101515610d1757fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d8257600080fd5b60008090505b600282815481101515610d9757fe5b906000526020600020906007020160050180549050811015610e9557600282815481101515610dc257fe5b906000526020600020906007020160050181815481101515610de057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600284815481101515610e3357fe5b906000526020600020906007020160060183815481101515610e5157fe5b90600052602060002001549081150290604051600060405180830381858888f19350505050158015610e87573d6000803e3d6000fd5b508080600101915050610d88565b50600080600283815481101515610ea857fe5b906000526020600020906007020160000154815481101515610ec657fe5b906000526020600020906006020160050160016101000a81548160ff021916908315150217905550600281815481101515610efd57fe5b90600052602060002090600702016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160009055600582016000610f639190613802565b600682016000610f739190613823565b505050565b600080600080600185815481101515610f8d57fe5b906000526020600020906004020160000154600186815481101515610fae57fe5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600187815481101515610fef57fe5b906000526020600020906004020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660018881548110151561103057fe5b90600052602060002090600402016003015493509350935093509193509193565b60038181548110151561106057fe5b9060005260206000209060070201600301543414151561107f57600080fd5b60038181548110151561108e57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515156110fa57600080fd5b3360038281548110151561110a57fe5b906000526020600020906007020160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b4260018281548110151561116c57fe5b90600052602060002090600402016003015410151561118a57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111e657600080fd5b6111ef81611dcf565b50565b600080600080600080600060038881548110151561120c57fe5b90600052602060002090600702016000015460038981548110151561122d57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038a81548110151561126e57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038b8154811015156112af57fe5b90600052602060002090600702016003015460038c8154811015156112d057fe5b90600052602060002090600702016004015460038d8154811015156112f157fe5b90600052602060002090600702016005015460038e81548110151561131257fe5b906000526020600020906007020160060160009054906101000a900460ff168595508494509650965096509650965096509650919395979092949650565b60018181548110151561135f57fe5b906000526020600020906004020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113ca57600080fd5b426001828154811015156113da57fe5b906000526020600020906004020160030154111515156113f957600080fd5b60018181548110151561140857fe5b906000526020600020906004020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060018381548110151561144b57fe5b90600052602060002090600402016000015481548110151561146957fe5b906000526020600020906006020160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000806001838154811015156114ca57fe5b9060005260206000209060040201600001548154811015156114e857fe5b906000526020600020906006020160050160006101000a81548160ff02191690831515021790555060018181548110151561151f57fe5b90600052602060002090600402016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160009055505050565b6000838154811015156115a057fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561160b57600080fd5b6000151560008481548110151561161e57fe5b906000526020600020906006020160050160009054906101000a900460ff16151514151561164b57600080fd5b6000151560008481548110151561165e57fe5b906000526020600020906006020160050160019054906101000a900460ff16151514151561168b57600080fd5b6000151560008481548110151561169e57fe5b906000526020600020906006020160050160029054906101000a900460ff1615151415156116cb57600080fd5b606080600260e0604051908101604052808781526020013373ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001428601815260200184815260200183815250908060018154018082558091505090600182039060005260206000209060070201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050190805190602001906117d2929190613844565b5060c08201518160060190805190602001906117ef9291906138ce565b50505050600160008681548110151561180457fe5b906000526020600020906006020160050160016101000a81548160ff0219169083151502179055505050505050565b60038181548110151561184257fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118ad57600080fd5b426003828154811015156118bd57fe5b906000526020600020906007020160040154016003828154811015156118df57fe5b90600052602060002090600702016005018190555060038181548110151561190357fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60038381548110151561195d57fe5b9060005260206000209060070201600301549081150290604051600060405180830381858888f1935050505015801561199a573d6000803e3d6000fd5b5050565b6003818154811015156119ad57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a1857600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600382815481101515611a6057fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611b5757600381815481101515611abe57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600383815481101515611b1857fe5b9060005260206000209060070201600301549081150290604051600060405180830381858888f19350505050158015611b55573d6000803e3d6000fd5b505b600080600383815481101515611b6957fe5b906000526020600020906007020160000154815481101515611b8757fe5b906000526020600020906006020160050160026101000a81548160ff021916908315150217905550600381815481101515611bbe57fe5b90600052602060002090600702016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160009055600482016000905560058201600090556006820160006101000a81549060ff0219169055505050565b6000806060600080600086815481101515611c6b57fe5b906000526020600020906006020160000154600087815481101515611c8c57fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600088815481101515611ccd57fe5b9060005260206000209060060201600201600089815481101515611ced57fe5b90600052602060002090600602016003015460008a815481101515611d0e57fe5b906000526020600020906006020160040154828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611db55780601f10611d8a57610100808354040283529160200191611db5565b820191906000526020600020905b815481529060010190602001808311611d9857829003601f168201915b505050505092509450945094509450945091939590929450565b600181815481101515611dde57fe5b906000526020600020906004020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e4957600080fd5b600080600183815481101515611e5b57fe5b906000526020600020906004020160000154815481101515611e7957fe5b906000526020600020906006020160050160006101000a81548160ff021916908315150217905550600181815481101515611eb057fe5b90600052602060002090600402016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160009055505050565b600281815481101515611f3157fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515611f9d57600080fd5b600281815481101515611fac57fe5b9060005260206000209060070201600201543410151515611fcc57600080fd5b600080905060008090505b600283815481101515611fe657fe5b9060005260206000209060070201600501805490508110156120a3573373ffffffffffffffffffffffffffffffffffffffff1660028481548110151561202857fe5b90600052602060002090600702016005018281548110151561204657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561209657600191506120a3565b8080600101915050611fd7565b506000811415156120b357600080fd5b6002828154811015156120c257fe5b90600052602060002090600702016005013390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060028281548110151561214657fe5b90600052602060002090600702016006013490806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b4260028281548110151561219557fe5b9060005260206000209060070201600401541015156121b357600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561220f57600080fd5b61221881610d08565b50565b60008381548110151561222a57fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561229557600080fd5b600015156000848154811015156122a857fe5b906000526020600020906006020160050160009054906101000a900460ff1615151415156122d557600080fd5b600015156000848154811015156122e857fe5b906000526020600020906006020160050160019054906101000a900460ff16151514151561231557600080fd5b6000151560008481548110151561232857fe5b906000526020600020906006020160050160029054906101000a900460ff16151514151561235557600080fd5b60008090506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600360e0604051908101604052808781526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184815260200160001515815250908060018154018082558091505090600182039060005260206000209060070201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690831515021790555050505060016000868154811015156124fb57fe5b906000526020600020906006020160050160026101000a81548160ff0219169083151502179055505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561258657600080fd5b60006101006040519081016040528060008054905081526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183815260200160001515815260200160001515815260200160001515815250908060018154018082558091505090600182039060005260206000209060060201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061267f92919061391b565b50606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e08201518160050160026101000a81548160ff02191690831515021790555050505050505050565b60028281548110151561270c57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561277757600080fd5b60028281548110151561278657fe5b9060005260206000209060070201600501818154811015156127a457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006002848154811015156127e057fe5b9060005260206000209060070201600001548154811015156127fe57fe5b906000526020600020906006020160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff166108fc60028481548110151561287657fe5b90600052602060002090600702016006018381548110151561289457fe5b90600052602060002001549081150290604051600060405180830381858888f193505050501580156128ca573d6000803e3d6000fd5b5060008090505b6002838154811015156128e057fe5b9060005260206000209060070201600501805490508110156129e85781811415156129db5760028381548110151561291457fe5b90600052602060002090600702016005018181548110151561293257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60028581548110151561298557fe5b9060005260206000209060070201600601838154811015156129a357fe5b90600052602060002001549081150290604051600060405180830381858888f193505050501580156129d9573d6000803e3d6000fd5b505b80806001019150506128d1565b506000806002848154811015156129fb57fe5b906000526020600020906007020160000154815481101515612a1957fe5b906000526020600020906006020160050160016101000a81548160ff021916908315150217905550600282815481101515612a5057fe5b90600052602060002090600702016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160009055600582016000612ab69190613802565b600682016000612ac69190613823565b50505050565b42600382815481101515612adc57fe5b906000526020600020906007020160050154101515612afa57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b5657600080fd5b600381815481101515612b6557fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000600383815481101515612ba857fe5b906000526020600020906007020160000154815481101515612bc657fe5b906000526020600020906006020160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080600383815481101515612c2757fe5b906000526020600020906007020160000154815481101515612c4557fe5b906000526020600020906006020160050160026101000a81548160ff021916908315150217905550600381815481101515612c7c57fe5b90600052602060002090600702016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160009055600482016000905560058201600090556006820160006101000a81549060ff0219169055505050565b600381815481101515612d2157fe5b90600052602060002090600702016003015434141515612d4057600080fd5b600381815481101515612d4f57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612dba57600080fd5b42600382815481101515612dca57fe5b90600052602060002090600702016005015411151515612de957600080fd5b600381815481101515612df857fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600383815481101515612e5257fe5b9060005260206000209060070201600301549081150290604051600060405180830381858888f19350505050158015612e8f573d6000803e3d6000fd5b50600080600383815481101515612ea257fe5b906000526020600020906007020160000154815481101515612ec057fe5b906000526020600020906006020160050160026101000a81548160ff021916908315150217905550600381815481101515612ef757fe5b90600052602060002090600702016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160009055600482016000905560058201600090556006820160006101000a81549060ff0219169055505050565b60008060008084815481101515612fa057fe5b906000526020600020906006020160050160009054906101000a900460ff16600085815481101515612fce57fe5b906000526020600020906006020160050160019054906101000a900460ff16600086815481101515612ffc57fe5b906000526020600020906006020160050160029054906101000a900460ff169250925092509193909250565b6000600380549050905090565b6000600180549050905090565b6000600280549050905090565b600080600080600060608060028881548110151561306957fe5b90600052602060002090600702016000015460028981548110151561308a57fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028a8154811015156130cb57fe5b90600052602060002090600702016002015460028b8154811015156130ec57fe5b90600052602060002090600702016003015460028c81548110151561310d57fe5b90600052602060002090600702016004015460028d81548110151561312e57fe5b906000526020600020906007020160050160028e81548110151561314e57fe5b9060005260206000209060070201600601818054806020026020016040519081016040528092919081815260200182805480156131e057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613196575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561323257602002820191906000526020600020905b81548152602001906001019080831161321e575b505050505090509650965096509650965096509650919395979092949650565b60008381548110151561326157fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156132cc57600080fd5b600015156000848154811015156132df57fe5b906000526020600020906006020160050160009054906101000a900460ff16151514151561330c57600080fd5b6000151560008481548110151561331f57fe5b906000526020600020906006020160050160019054906101000a900460ff16151514151561334c57600080fd5b6000151560008481548110151561335f57fe5b906000526020600020906006020160050160029054906101000a900460ff16151514151561338c57600080fd5b60016080604051908101604052808581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001834201815250908060018154018082558091505090600182039060005260206000209060040201600090919290919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015550505060016000848154811015156134bf57fe5b906000526020600020906006020160050160006101000a81548160ff021916908315150217905550505050565b60008080549050905090565b60038181548110151561350757fe5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561357257600080fd5b60038181548110151561358157fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003838154811015156135db57fe5b9060005260206000209060070201600301549081150290604051600060405180830381858888f19350505050158015613618573d6000803e3d6000fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660038281548110151561364b57fe5b906000526020600020906007020160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6003818154811015156136ac57fe5b906000526020600020906007020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561371757600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc60038381548110151561374057fe5b9060005260206000209060070201600301549081150290604051600060405180830381858888f1935050505015801561377d573d6000803e3d6000fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003828154811015156137b057fe5b906000526020600020906007020160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5080546000825590600052602060002090810190613820919061399b565b50565b5080546000825590600052602060002090810190613841919061399b565b50565b8280548282559060005260206000209081019282156138bd579160200282015b828111156138bc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613864565b5b5090506138ca91906139c0565b5090565b82805482825590600052602060002090810192821561390a579160200282015b828111156139095782518255916020019190600101906138ee565b5b509050613917919061399b565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061395c57805160ff191683800117855561398a565b8280016001018555821561398a579182015b8281111561398957825182559160200191906001019061396e565b5b509050613997919061399b565b5090565b6139bd91905b808211156139b95760008160009055506001016139a1565b5090565b90565b613a0091905b808211156139fc57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016139c6565b5090565b9056fea165627a7a7230582006f3d2f789e3b26680890d0fc3590532aa766c452cb9d4a43de5846077487f010029"
    w3 = None
    contract_address = web3.Web3.toChecksumAddress('0xb0dad34fbe13fa4d016c76c3b4b6ba40c5d69822')
    user_address = None
    passfrase = None
    ws = None
    admin = web3.Web3.toChecksumAddress('0xac771378bb6c2b8878fbf75f80880cbddefd1b1e')

    def __init__(self):
        # self.w3 = Web3(web3.HTTPProvider('http://127.0.0.1:8545'))
        self.w3 = Web3(web3.HTTPProvider('http://192.168.100.12:8545'))
        self.ws = self.w3.eth.contract(
            address=self.contract_address,
            abi=self.abi,
        )

    # РАБОТАЕТ
    def auth(self, login, password):
        try:
            self.user_address = web3.Web3.toChecksumAddress(str(login))
        except Exception:
            log = False
        else:
            self.passfrase = str(password)
            log = self.w3.personal.unlockAccount(self.user_address, self.passfrase)
            self.w3.eth.defaultAccount = self.user_address
        print("Address: ", self.user_address)
        return log

    # РАБОТАЕТ
    def create_estate(self, owner, info, squaere, useful):
        if self.user_address == self.admin:
            owner = web3.Web3.toChecksumAddress(str(owner))
            info = str(info)
            squaere = int(squaere)
            useful = int(useful)
            self.w3.personal.unlockAccount(self.user_address, self.passfrase)
            self.w3.eth.defaultAccount = self.user_address
            self.w3.miner.start(1)
            tx = self.ws.functions.create_estate(owner, info, squaere, useful).transact({'gas': 9000000})
            self.w3.eth.waitForTransactionReceipt(tx)
            self.w3.miner.stop()

    # РАБОТАЕТ
    def get_estates_number(self):
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.ws.functions.get_estates_number().call()
        return number

    # РАБОТАЕТ
    def get_estates(self):
        list_of_estates = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_estates_number()
        print(number)
        for id in range(number):
            answer = self.ws.functions.get_estates(id).call()
            # посмотреть на название функции
            status = self.ws.functions.get_estates_statuses(id).call()
            for i in status:
                answer.append(i)
            list_of_estates.append(answer)
        return list_of_estates

    # РАБОТАЕТ
    def get_estate_by_id(self, estate_id):
        answer = self.ws.functions.get_estates(estate_id).call()
        return answer

    # РАБОТАЕТ
    def my_estates(self):
        list_of_estates = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_estates_number()
        for id in range(number):
            answer = self.ws.functions.get_estates(id).call()
            if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                answer.pop(1)
                for i in range(len(answer)):
                    answer[i] = str(answer[i])
                status = self.ws.functions.get_estates_statuses(id).call()
                for i in status:
                    if i:
                        answer.append("да")
                    else:
                        answer.append("нет")
                list_of_estates.append(answer)
        return list_of_estates

    # РАБОТАЕТ
    def can_present(self):
        list_of_present = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        estates_number = self.get_estates_number()
        # print(estates_number)
        for id in range(estates_number):
            status = self.ws.functions.get_estates_statuses(id).call()
            # print(status)
            count = 0
            for i in status:
                if i:
                    break
                else:
                    count += 1
            if count == 3:
                answer = self.ws.functions.get_estates(id).call()
                if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                    answer.pop(1)
                    for j in range(len(answer)):
                        answer[j] = str(answer[j])
                    list_of_present.append(answer)
        return list_of_present

    # РАБАТАЕТ (СЛЕДИТЬ ЗА ИНДЕКСАМИ!)
    def create_present(self, estate_id, address_to, deadline):
        '''
        :param estate_id: номер собственности в реестре
        :param address_to:
        :param deadline: количество дней (срок истечения заказа)
        :return:
        '''
        estate_id = int(estate_id)
        address_to = web3.Web3.toChecksumAddress(str(address_to))
        deadline = int(deadline) * 86400
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        answer = self.ws.functions.get_estates(estate_id).call()
        print(answer)
        if self.user_address == web3.Web3.toChecksumAddress(answer[1]):
            self.w3.miner.start(1)
            tx = self.ws.functions.create_present(estate_id, address_to, deadline).transact({'gas': 9000000})
            self.w3.eth.waitForTransactionReceipt(tx)
            self.w3.miner.stop()

    # РАБОТАЕТ
    # количество подарков
    def get_presents_number(self):
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.ws.functions.get_presents_number().call()
        return number

    # РАБОТАЕТ
    def get_present_by_number(self, present_id):
        # self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        # self.w3.eth.defaultAccount = self.user_address
        number = self.ws.functions.get_presents(present_id).call()
        return number

    # РАБОТАЕТ
    def my_present(self):
        list_of_estates = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_presents_number()
        for id in range(number):
            present = self.ws.functions.get_presents(id).call()
            if web3.Web3.toChecksumAddress(present[2]) == self.user_address:
                # удаляем адрес получателя
                present.pop(2)
                # время
                present[2] = time.ctime(int(present[2]))
                estate = self.ws.functions.get_estates(id).call()
                for i in range(len(present)):
                    present[i] = str(present[i])
                # физический адрес
                present.insert(2, str(estate[2]))
                # общая площадь
                present.insert(3, str(estate[3]))
                # полезная площадь
                present.insert(4, str(estate[4]))
                list_of_estates.append(present)
        return list_of_estates

    # РАБОТАЕТ
    def i_presented(self):
        list_of_estates = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_presents_number()
        for id in range(number):
            present = self.ws.functions.get_presents(id).call()
            if web3.Web3.toChecksumAddress(present[1]) == self.user_address:
                # удаляем адрес получателя
                present.pop(1)
                # время
                present[2] = time.ctime(int(present[2]))
                estate = self.ws.functions.get_estates(id).call()
                for i in range(len(present)):
                    present[i] = str(present[i])
                # физический адрес
                present.insert(2, str(estate[2]))
                # общая площадь
                present.insert(3, str(estate[3]))
                # полезная площадь
                present.insert(4, str(estate[4]))
                list_of_estates.append(present)
        return list_of_estates

    # ПОПРАВИТЬ В КОНТРАКТЕ
    def confirm_present(self, present_id):
        '''
        Тот кому дарят, принимает подарок
        :param present_id: индекс элемента в списке струтур Present
        '''
        present_id = int(present_id)
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        answer = self.ws.functions.get_presents(present_id).call()
        time_present = int(answer[3])
        now = int(time.time())
        if time_present > now:
            self.w3.miner.start(1)
            tx = self.ws.functions.confirm_present(present_id).transact({'gas': 9000000})
            self.w3.eth.waitForTransactionReceipt(tx)
            self.w3.miner.stop()

    # РАБОТАЕТ
    def cancel_present(self, estate_id):
        '''
        Тот кто дарит, отменяет свой подарок
        :param estate_id: индекс элемента в списке струтур Present
        '''
        number = self.get_estates_number()
        for id in range(number):
            answer = self.get_present_by_number(id)
            if int(answer[0]) == int(estate_id):
                self.w3.personal.unlockAccount(self.user_address, self.passfrase)
                self.w3.eth.defaultAccount = self.user_address
                if answer[1] == self.user_address:
                    self.w3.miner.start(1)
                    tx = self.ws.functions.cancel_present(id).transact({'gas': 90000000})
                    self.w3.eth.waitForTransactionReceipt(tx)
                    self.w3.miner.stop()
                    break



    # ПИШЕТ СЛАВА


    # ЗАЛОГИ

    # РАБОТАЕТ
    def can_pledge(self):
        '''
        Моя согбственность которую я могу заложить
        :return:
        '''
        list_of_pledge = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        estates_number = self.get_estates_number()
        # print(estates_number)
        for id in range(estates_number):
            status = self.ws.functions.get_estates_statuses(id).call()
            # print(status)
            count = 0
            for i in status:
                if i:
                    break
                else:
                    count += 1
            if count == 3:
                answer = self.ws.functions.get_estates(id).call()
                if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                    answer.pop(1)
                    for j in range(len(answer)):
                        answer[j] = str(answer[j])
                    list_of_pledge.append(answer)
        return list_of_pledge


    # КНОПКА
    # РАБОТАЕТ
    def create_pledge(self, estate_id, price, time):
        estate_id = int(estate_id)
        # address_to = web3.Web3.toChecksumAddress(str(address_to))
        time = int(time) * 86400
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        answer = self.ws.functions.get_estates(estate_id).call()
        print(answer)
        if self.user_address == web3.Web3.toChecksumAddress(answer[1]):
            self.w3.miner.start(1)
            tx = self.ws.functions.create_pledge(estate_id, price, time).transact({'gas': 9000000})
            self.w3.eth.waitForTransactionReceipt(tx)
            self.w3.miner.stop()

    def get_pledges_number(self):
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.ws.functions.get_pledges_number().call()
        return number

    def my_pledges(self):
        list_of_pledges = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_pledges_number()
        for id in range(number):
            answer = self.ws.functions.get_pledges(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                    estate = self.get_estates[answer[0]]
                    new_answer.append(answer[0])
                    new_answer.append(estate[2])
                    new_answer.append(estate[3])
                    new_answer.append(estate[4])
                    new_answer.append(answer[3])
                    new_answer.append(answer[4])
                    for i in range(len(new_answer)):
                        new_answer[i] = str(new_answer[i])
                    list_of_pledges.append(new_answer)
        return list_of_pledges

    def show_pledges_i_got(self):
        list_of_pledges = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_pledges_number()
        for id in range(number):
            answer = self.ws.functions.get_pledges(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                    estate = self.get_estates[answer[0]]
                    new_answer.append(answer[0])
                    new_answer.append(estate[2])
                    new_answer.append(estate[3])
                    new_answer.append(estate[4])
                    new_answer.append(answer[2])
                    new_answer.append(answer[3])
                    new_answer.append(answer[4])
                    for i in range(len(new_answer)):
                        new_answer[i] = str(new_answer[i])
                    list_of_pledges.append(new_answer)
        return list_of_pledges

    def show_pledges_i_confirm(self):
        list_of_pledges = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_pledges_number()
        for id in range(number):
            answer = self.ws.functions.get_pledges(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                    if answer[2] != web3.Web3.toChecksumAddress('0x0000000000000000000000000000000000000000'):
                        estate = self.get_estates[answer[0]]
                        new_answer.append(answer[0])
                        new_answer.append(estate[2])
                        new_answer.append(estate[3])
                        new_answer.append(estate[4])
                        new_answer.append(answer[2])
                        new_answer.append(answer[3])
                        new_answer.append(answer[4])
                        for i in range(len(new_answer)):
                            new_answer[i] = str(new_answer[i])
                        list_of_pledges.append(new_answer)
        return list_of_pledges

    def show_pledges_when_i_find_money(self):
        list_of_pledges = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_pledges_number()
        for id in range(number):
            answer = self.ws.functions.get_pledges(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                    if answer[2] != web3.Web3.toChecksumAddress('0x0000000000000000000000000000000000000000'):
                        if answer[6]:
                            estate = self.get_estates[answer[0]]
                            new_answer.append(answer[0])
                            new_answer.append(estate[2])
                            new_answer.append(estate[3])
                            new_answer.append(estate[4])
                            new_answer.append(answer[2])
                            new_answer.append(answer[3])
                            new_answer.append(answer[4])
                            for i in range(len(new_answer)):
                                new_answer[i] = str(new_answer[i])
                            list_of_pledges.append(new_answer)
        return list_of_pledges

    def show_pledges_when_i_get_money(self):
        list_of_pledges = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_pledges_number()
        for id in range(number):
            answer = self.ws.functions.get_pledges(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                    if answer[2] != web3.Web3.toChecksumAddress('0x0000000000000000000000000000000000000000'):
                        if answer[6]:
                            if answer[5]:
                                estate = self.get_estates[answer[0]]
                                new_answer.append(answer[0])
                                new_answer.append(estate[2])
                                new_answer.append(estate[3])
                                new_answer.append(estate[4])
                                new_answer.append(answer[2])
                                new_answer.append(answer[3])
                                new_answer.append(answer[5])
                                for i in range(len(new_answer)):
                                    new_answer[i] = str(new_answer[i])
                                list_of_pledges.append(new_answer)
        return list_of_pledges

    def choose_to_guess_pledge(self):
        list_of_pledges = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_pledges_number()
        for id in range(number):
            answer = self.ws.functions.get_pledges(id).call()
            if answer[0]:
                estate = self.get_estates[answer[0]]
                new_answer.append(answer[0])
                new_answer.append(answer[1])
                new_answer.append(estate[2])
                new_answer.append(estate[3])
                new_answer.append(estate[4])
                new_answer.append(answer[3])
                new_answer.append(answer[4])
                for i in range(len(new_answer)):
                    new_answer[i] = str(new_answer[i])
                list_of_pledges.append(new_answer)
        return list_of_pledges

    def choose_to_cancel_guess_pledge(self):
        list_of_pledges = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_pledges_number()
        for id in range(number):
            answer = self.ws.functions.get_pledges(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[2]) == self.user_address:
                    estate = self.get_estates[answer[0]]
                    new_answer.append(answer[0])
                    new_answer.append(answer[1])
                    new_answer.append(estate[2])
                    new_answer.append(estate[3])
                    new_answer.append(estate[4])
                    new_answer.append(answer[3])
                    new_answer.append(answer[4])
                    for i in range(len(new_answer)):
                        new_answer[i] = str(new_answer[i])
                    list_of_pledges.append(new_answer)
        return list_of_pledges

    def choose_to_give_money_pledge(self):
        list_of_pledges = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_pledges_number()
        for id in range(number):
            answer = self.ws.functions.get_pledges(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[2]) == self.user_address:
                    if answer[6]:
                        estate = self.get_estates[answer[0]]
                        new_answer.append(answer[0])
                        new_answer.append(answer[1])
                        new_answer.append(estate[2])
                        new_answer.append(estate[3])
                        new_answer.append(estate[4])
                        new_answer.append(answer[3])
                        new_answer.append(answer[4])
                        for i in range(len(new_answer)):
                            new_answer[i] = str(new_answer[i])
                        list_of_pledges.append(new_answer)
        return list_of_pledges

    def pledge_that_im_waiting(self):
        list_of_pledges = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_pledges_number()
        for id in range(number):
            answer = self.ws.functions.get_pledges(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[2]) == self.user_address:
                    if answer[6]:
                        if answer[5]:
                            estate = self.get_estates[answer[0]]
                            new_answer.append(answer[0])
                            new_answer.append(answer[1])
                            new_answer.append(estate[2])
                            new_answer.append(estate[3])
                            new_answer.append(estate[4])
                            new_answer.append(answer[3])
                            new_answer.append(answer[5])
                            for i in range(len(new_answer)):
                                new_answer[i] = str(new_answer[i])
                            list_of_pledges.append(new_answer)
        return list_of_pledges



    # КУПЛЯ - ПРОДАЖА

    # РАБОТАЕТ
    def can_sale(self):
        list_of_sale = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        estates_number = self.get_estates_number()
        # print(estates_number)
        for id in range(estates_number):
            status = self.ws.functions.get_estates_statuses(id).call()
            # print(status)
            count = 0
            for i in status:
                if i:
                    break
                else:
                    count += 1
            if count == 3:
                answer = self.ws.functions.get_estates(id).call()
                if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                    answer.pop(1)
                    for j in range(len(answer)):
                        answer[j] = str(answer[j])
                    list_of_sale.append(answer)
        return list_of_sale

    # РАБОТАЕТ
    def get_sales_number(self):
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.ws.functions.get_sales_number().call()
        return number

    # РАБОТАЕТ
    def get_sale_by_id(self, sale_id):
        # self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        # self.w3.eth.defaultAccount = self.user_address
        number = self.ws.functions.get_sales(sale_id).call()
        return number

    # РАБОТАЕТ
    def my_sales(self):
        list_of_sales = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_sales_number()
        for id in range(number):
            answer = self.ws.functions.get_sales(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                    estate = self.get_estate_by_id(answer[0])
                    new_answer.append(answer[0])
                    new_answer.append(estate[2])
                    new_answer.append(estate[3])
                    new_answer.append(estate[4])
                    new_answer.append(answer[2])
                    new_answer.append(answer[4])
                    # new_answer.append(answer[5])
                    # new_answer.append(answer[6])
                    for i in range(len(new_answer)):
                        new_answer[i] = str(new_answer[i])
                    list_of_sales.append(new_answer)
        return list_of_sales

    # РАБОТАЕТ
    def who_want_to_buy(self):
        list_of_sales = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_sales_number()
        for id in range(number):
            answer = self.ws.functions.get_sales(id).call()
            # print(answer)
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[1]) == self.user_address:
                    for i in range(len(answer[5])):
                        if answer[5][i] != '0x0000000000000000000000000000000000000000':
                            estate = self.get_estate_by_id(int(answer[0]))
                            # [3, '0x370c6cFC1662a0d7B995B98B22652cb1DBE94795', 'Чехова, 2', 123, 100]
                            # estate_id
                            new_answer = []
                            new_answer.append(answer[0])
                            # физический адрес
                            new_answer.append(estate[2])
                            # общая площадь
                            new_answer.append(estate[3])
                            # полезная площадь
                            new_answer.append(estate[4])
                            # цена, установленная продавцом
                            new_answer.append(answer[2])
                            # время окончания срока действия предложения о продаже
                            new_answer.append(answer[4])
                            # добавить кто предложил
                            new_answer.append(answer[5][i])
                            # добавить сколько предложили
                            new_answer.append(answer[6][i])
                            # new_answer.append(answer[5])
                            # new_answer.append(answer[6])
                            list_of_sales.append(new_answer)
                            for j in range(len(new_answer)):
                                new_answer[j] = str(new_answer[j])
        return list_of_sales

    # РАБОТАЕТ
    def choose_to_buy(self):
        list_of_sales = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_sales_number()
        for id in range(number):
            answer = self.ws.functions.get_sales(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[1]) != self.user_address:
                    # Поменять индекс
                    estate = self.get_estate_by_id(answer[0])
                    # estate_id
                    new_answer.append(answer[0])
                    # физический адрес
                    new_answer.append(estate[2])
                    # общая площадь
                    new_answer.append(estate[3])
                    # полезная площадь
                    new_answer.append(estate[4])
                    # цена
                    new_answer.append(answer[2])
                    # дедлайн
                    answer[4] = time.ctime(int(answer[4]))
                    new_answer.append(answer[4])
                    # new_answer.append(answer[5])
                    # new_answer.append(answer[6])
                    for i in range(len(new_answer)):
                        new_answer[i] = str(new_answer[i])
                    list_of_sales.append(new_answer)
        return list_of_sales

    # РАБОТАЕТ
    def i_have_payed(self):
        list_of_sales = []
        new_answer = []
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        number = self.get_sales_number()
        for id in range(number):
            answer = self.ws.functions.get_sales(id).call()
            if answer[0]:
                if web3.Web3.toChecksumAddress(answer[1]) != self.user_address:
                    for i in range(len(answer[5])):
                        if answer[5][i] == self.user_address:
                            estate = self.get_estate_by_id(int(answer[0]))
                            # [3, '0x370c6cFC1662a0d7B995B98B22652cb1DBE94795', 'Чехова, 2', 123, 100]
                            # estate_id
                            new_answer = []
                            new_answer.append(answer[0])
                            # физический адрес
                            new_answer.append(estate[2])
                            # общая площадь
                            new_answer.append(estate[3])
                            # полезная площадь
                            new_answer.append(estate[4])
                            # цена, установленная продавцом
                            new_answer.append(answer[2])
                            # дедлайн
                            new_answer.append(answer[4])
                            # добавить кто предложил
                            new_answer.append(answer[5][i])
                            # добавить сколько предложили
                            new_answer.append(answer[6][i])
                            # new_answer.append(answer[5])
                            # new_answer.append(answer[6])
                            list_of_sales.append(new_answer)
                            for j in range(len(new_answer)):
                                new_answer[j] = str(new_answer[j])
        return list_of_sales

    # КНОПКА
    # РАБОТАЕТ
    def create_sale(self, estate_id, price, deadline):
        '''
        :param estate_id:
        :param price: продавец указывает цену недвижимости в эфире
        :param deadline: срок окончания продажи
        :return:
        '''
        estate_id = int(estate_id)
        price = int(price)
        deadline = int(deadline)
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        answer = self.ws.functions.get_estates(estate_id).call()
        print(answer)
        if self.user_address == web3.Web3.toChecksumAddress(answer[1]):
            self.w3.miner.start(1)
            tx = self.ws.functions.create_sale(estate_id, price, deadline).transact({'gas': 900000000})
            self.w3.eth.waitForTransactionReceipt(tx)
            self.w3.miner.stop()

    # РАБОТАЕТ
    def i_want_to_buy(self, sale_number, price):
        '''
        Покупатель выбирает недвижимость, которую он хочет купить
        :param sale_number: индекс собственности в Sales
        :param price: цена в эфире
        '''
        price = int(price)
        number = self.get_estates_number()
        for id in range(number):
            answer = self.ws.functions.get_sales(id).call()
            if int(answer[0]) == int(sale_number):
                self.w3.personal.unlockAccount(self.user_address, self.passfrase)
                self.w3.eth.defaultAccount = self.user_address
                if self.user_address != web3.Web3.toChecksumAddress(answer[1]):
                    self.w3.miner.start(1)
                    tx = self.ws.functions.check_to_buy(sale_number).transact({'to': self.contract_address, 'from': self.user_address, 'value': Web3.toWei(price, 'ether'), 'gas': 9000000})
                    self.w3.eth.waitForTransactionReceipt(tx)
                    self.w3.miner.stop()
        # print(self.ws.functions.get_sales(sale_number).call())

    # РАБОТАЕТ
    def cancel_sale(self, sale_id):
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        sale_id = int(sale_id)
        answer = self.get_sale_by_id(sale_id)
        if answer[1] == self.user_address:
            self.w3.miner.start(1)
            tx = self.ws.functions.cancel_sale(sale_id).transact({'gas': 9000000})
            self.w3.eth.waitForTransactionReceipt(tx)
            self.w3.miner.stop()

    # СЛАВА ИСПАВЛЯЕТ
    def confirm_sale(self, sale_id, customer):
        self.w3.personal.unlockAccount(self.user_address, self.passfrase)
        self.w3.eth.defaultAccount = self.user_address
        sale_id = int(sale_id)
        answer = self.get_sale_by_id(sale_id)
        if answer[1] == self.user_address:
            self.w3.miner.start(1)
            tx = self.ws.functions.cancel_sale(sale_id).transact({'gas': 9000000})
            self.w3.eth.waitForTransactionReceipt(tx)
            self.w3.miner.stop()
